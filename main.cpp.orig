/*
#include <iostream>
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
*/
#include <opencv2/opencv.hpp>

#include "raspicam/raspicam_cv.h"

using namespace std;
using namespace cv;

int main()
{
/*
    time_t timer_begin,timer_end;    
*/
    raspicam::RaspiCam_Cv Camera;    
    cv::Mat image;    

    //set camera params
    /**Sets a property in the VideoCapture.
    * Implemented properties:
    * CV_CAP_PROP_FRAME_WIDTH,CV_CAP_PROP_FRAME_HEIGHT,
    * CV_CAP_PROP_FORMAT: CV_8UC1 or CV_8UC3
    * CV_CAP_PROP_BRIGHTNESS: [0,100]
    * CV_CAP_PROP_CONTRAST: [0,100]
    * CV_CAP_PROP_SATURATION: [0,100]
    * CV_CAP_PROP_GAIN: (iso): [0,100]
    * CV_CAP_PROP_EXPOSURE: -1 auto. [1,100] shutter speed from 0 to 33ms
    * CV_CAP_PROP_WHITE_BALANCE_RED_V : [1,100] -1 auto whitebalance
    * CV_CAP_PROP_WHITE_BALANCE_BLUE_U : [1,100] -1 auto whitebalance
    * CV_CAP_PROP_FPS
    */
/*
    Camera.set( CV_CAP_PROP_FORMAT, CV_8UC3 ); // gray: CV_8UC1; color: CV_8UC3
    Camera.set( CV_CAP_PROP_FRAME_HEIGHT, 480 ); // 960
    Camera.set( CV_CAP_PROP_FRAME_WIDTH, 640 ); // 1280
    Camera.set( CV_CAP_PROP_EXPOSURE, -1);


    //Open camera

    cout << "Opening Camera..." << endl;
*/
/*  if (!*/Camera.open();/*)*/
/*
    {
        cerr << "Error opening the camera" << endl;
        cv::waitKey();
        return -1;
    }
    int fps = Camera.get( CV_CAP_PROP_FPS );

    //Start capture
    time ( &timer_begin );
    int i=0;
*/
    for (;;)
    {
/*
        i++;
*/
        Camera.grab();
        Camera.retrieve (image);
        cv::imshow("live image", image);
    //Exerise 3
/*
        if ( i%5==0 )
        {
            cout << "\r captured " << i <<" images" << ", size:" << image.rows << "x" << image.cols << ", FPS: " << fps << std::flush;
        }
*/
        if (cv::waitKey(5) > 0)
        {
            break;
        }
    }

    // Release camera
    Camera.release();

    //show time statistics
/*    time ( &timer_end ); *//* get current time; same as: timer = time(NULL)  */
/*
    double secondsElapsed = difftime ( timer_end,timer_begin );
    cout << secondsElapsed <<" seconds for " << i << "  frames : FPS = "<<  ( float ) ( ( float ) ( i ) /secondsElapsed ) << endl;
*/
    //save image
/*
    cv::imwrite("raspicam_cv_image.jpg",image);
    cout << "Image saved at raspicam_cv_image.jpg" << endl;
*/
    return 0;
}

